# === external dependencies ==================================================

# ARCHIE_BUILD_TESTING - user opiton to enable test buld along with regular build
option(ARCHIE_BUILD_TESTING "Extend builds with tests" OFF)
# ARCHIE_ERROR_FLAGS - variable (directory or parent scope) with default CXX options
if(NOT ARCHIE_ERROR_FLAGS)
  message(WARNING "ARCHIE_ERROR_FLAGS necessary for default CXX flags")
endif()

# === Coverage build =========================================================

if("Coverage" STREQUAL "${ARCHIE_BUILD_TYPE}") 
    find_program(GCOV_PATH gcov)
    find_program(LCOV_PATH NAMES lcov lcov.bat lcov.exe lcov.perl)
    if(NOT GCOV_PATH OR NOT LCOV_PATH)
        message(FATAL_ERROR "ARCHIE: gcov and lcov is needed for coverage target")
    endif()
    # TODO(rishin): Support VC++
    if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang" AND CMAKE_BUILD_TYPE MATCHES "Debug")
        # Debug option should set -O0 and -g flags necessary for coverage
        message(STATUS "ARCHIE: Building with coverage enabled")
    else()
        message(FATAL_ERROR "ARCHIE: Conflicting build options with coverage enabled")
    endif()

    add_custom_command(OUTPUT coverage.info
            COMMAND lcov --directory ${CMAKE_CURRENT_BINARY_DIR} --capture --output-file coverage.info
            COMMAND lcov --remove coverage.info '/usr/*' --output-file coverage.info
            COMMAND lcov --list coverage.info
        )
    add_custom_target(coverage DEPENDS coverage.info)
endif()


# === Build functions ========================================================


#[=======================================================================[.rst:
Add a C/C++ shared library.

The is will add two targets "${namespace}-${name}" (SHARED library) and 
"${namespace}-${name}-static" (STATIC library). However only one alias 
${namespace}::${name} is generated which is for the shared library. All shared 
targests generated by `archie_cxx_library` have the property 
ARCHIE_STATIC_TARGET which refers to static target. So the DEPS_PRIV and 
DEPS_PUBL lists can automatically be converted to the static dependencies 
for the static target. This ensures all transitive dependencies of the static 
library are as static as possible. 

TODO: elaborate meaning of as static as possible.

.. code-block:: cmake

  archie_cxx_library(<namespace> <name>
              [EXCLUDE_FROM_ALL]
              <SRCS> [items...]
              <HDRS_PUBL> [items...]
              <INCLS_PUBL> [items...]
              <DEPS> [items...]
              <COPTS_PRIV> [items...])

:param str namespace: Package or namespace of the library.
:param str name: Name of the library.
:param option EXCLUDE_FROM_ALL: Exclude from the ``all`` target.
:param list SRCS: Source and private header files.
:param list HDRS_PUBL: Public header files.
:param list INCLS_PUBL: Path for including public headers.
:param list DEPS_PUBL: Dependencies to be linked. Headers of deps is transitive.
:param list DEPS_PRIV: Dependencies to be linked. Headers of deps is intransitive.

TODO - [STATIC_ONLY|SHARED_ONLY]
TODO - DEFINES_PUBL, DEFINES_PRIV to be added later.
TODO - LINKOPTS_???? needs to be researched whether transitive or intransitive 
before adding.

NOTE: INCLS_PUBL cannot be avoided even a mechanism like HDRS_PUBL was 
introduced. This is dangerous since a source may incl a header without actually
referring to it.

Opinions -

* HDRS_PRIV is unnecessary since same as source.
* INCLUDES_PRIV is unnecessary as long as private headers are relative to source.
* COPTS_PUBL is dangerous so not kept. TODO will be dealt on case by case basis.
* Use of ``INTERFACE`` is unnecessary throughout. Any library with interface and 
PUBLIC can always be broken into two libraries.
* One alias for both targets - By using one alias and letting the func take care
of specific linking we avoid cases where we link to both the static and shared 
version of the same library.
* LINK_STATIC is dangerous - Same reason for having one alias. A dynamic lib 
linking to a static version can lead to duplication where both shared and static
libs are linked.

#]=======================================================================]
function(archie_cxx_library namespace name)
  # TODO: validate that name does not end with "-static"
  # Parse arguments
  set(options EXCLUDE_FROM_ALL)
  cmake_parse_arguments(PARAM "${options}" "" "" ${ARGN})
  # Create the target names for shared and static
  set(name_static "${name}-static")
  set(target "${namespace}-${name}")
  set(target_static "${namespace}-${name_static}")
  # Create shared lib
  if(NOT PARAM_EXCLUDE_FROM_ALL)
    add_library(${target} SHARED)
  else()
    add_library(${target} SHARED EXCLUDE_FROM_ALL)
  endif()
  archie_cxx_library_internal_(${target} ${ARGN})
  set_target_properties(${target} PROPERTIES ARCHIE_STATIC_TARGET "${target_static}")
  add_library(${namespace}::${name} ALIAS ${target})
  # Create static lib
  if(NOT PARAM_EXCLUDE_FROM_ALL)
    add_library(${target_static} STATIC)
  else()
    add_library(${target_static} STATIC EXCLUDE_FROM_ALL)
  endif()
  archie_cxx_library_internal_(${target_static} LINK_STATIC ${ARGN})
  # TODO: windows case where there will be a conflict for shared and static having same name
  set_target_properties(${target_static} PROPERTIES OUTPUT_NAME "${target}")
endfunction()

function(archie_cxx_library_internal_ target)
  # Parse arguments.
  set(options LINK_STATIC)
  set(multiValueArgs SRCS HDRS_PUBL INCLS_PUBL DEPS_PUBL DEPS_PRIV COPTS_PRIV)
  cmake_parse_arguments(PARAM "${options}" "" "${multiValueArgs}" ${ARGN})
  #
  target_sources(${target} PRIVATE ${PARAM_SRCS})
  target_sources(${target} PUBLIC ${PARAM_HDRS_PUBL})
  target_include_directories(${target} PUBLIC ${PARAM_INCLS_PUBL})
  target_compile_options(${target} PRIVATE ${PARAM_COPTS_PRIV})
  #
  if (PARAM_LINK_STATIC)
    archie_deps_to_static_("${PARAM_DEPS_PUBL}" out_deps_publ)
    message(DEBUG "ARCHIE: archie_cxx_library_internal_ public static case target=${target} deps=${out_deps_publ}")
    target_link_libraries(${target} ${out_deps_publ})
    #
    archie_deps_to_static_("${PARAM_DEPS_PRIV}" out_deps_priv)
    message(DEBUG "ARCHIE: archie_cxx_library_internal_ private static case target=${target} deps=${out_deps_priv}")
    target_link_libraries(${target} PRIVATE ${out_deps_priv})
  else()
    message(DEBUG "ARCHIE: archie_cxx_library_internal_ public shared case target=${target} deps=${PARAM_DEPS_PUBL}")
    target_link_libraries(${target} ${PARAM_DEPS_PUBL})
    #
    message(DEBUG "ARCHIE: archie_cxx_library_internal_ private shared case target=${target} deps=${PARAM_DEPS_PRIV}")
    target_link_libraries(${target} PRIVATE ${PARAM_DEPS_PRIV})
  endif()
endfunction()

function(archie_deps_to_static_ deps_list outlist)
  set(out "")
  foreach(elem ${deps_list})
    get_target_property(target "${elem}" ARCHIE_STATIC_TARGET)
    if(NOT "${target}" STREQUAL "target-NOTFOUND")
      list(APPEND out ${target})
    else()
      list(APPEND out ${elem})
    endif()
  endforeach()
  set(${outlist} "${out}" PARENT_SCOPE)
endfunction()


#[=======================================================================[.rst:
Add a C/C++ header library.

.. code-block:: cmake

  archie_cxx_library_header(<namespace> <name>
              [EXCLUDE_FROM_ALL]
              <HDRS_PUBL> [items...]
              <INCLS_PUBL> [items...]
              <DEPS_PUBL> [items...]
              <COPTS_PUBL> [items...])

#]=======================================================================]
function(archie_cxx_library_header namespace name)
  # TODO: validate that name does not end with "-static"
  # Parse arguments
  set(options EXCLUDE_FROM_ALL)
  set(multiValueArgs HDRS_PUBL)
  cmake_parse_arguments(PARAM "${options}" "" "${multiValueArgs}" ${ARGN})
  # Create the target names for shared and static
  set(name_static "${name}-static")
  set(target "${namespace}-${name}")
  set(target_static "${namespace}-${name_static}")
  # Create shared lib
  if(NOT PARAM_EXCLUDE_FROM_ALL)
    add_library(${target} INTERFACE ${HDRS_PUBL})
  else()
    add_library(${target} INTERFACE ${HDRS_PUBL} EXCLUDE_FROM_ALL)
  endif()
  archie_cxx_library_internal_header_(${target} ${ARGN})
  set_target_properties(${target} PROPERTIES ARCHIE_STATIC_TARGET "${target_static}")
  add_library(${namespace}::${name} ALIAS ${target})
  # Create static lib
  if(NOT PARAM_EXCLUDE_FROM_ALL)
    add_library(${target_static} INTERFACE)
  else()
    add_library(${target_static} INTERFACE EXCLUDE_FROM_ALL)
  endif()
  archie_cxx_library_internal_header_(${target_static} LINK_STATIC ${ARGN})
  # TODO: windows case where there will be a conflict for shared and static having same name
  set_target_properties(${target_static} PROPERTIES OUTPUT_NAME "${target}")
endfunction()

function(archie_cxx_library_internal_header_ target)
  # Parse arguments.
  set(options LINK_STATIC)
  set(multiValueArgs INCLS_PUBL DEPS_PUBL COPTS_PUBL)
  cmake_parse_arguments(PARAM "${options}" "" "${multiValueArgs}" ${ARGN})
  #
  target_include_directories(${target} INTERFACE ${PARAM_INCLS_PUBL})
  target_compile_options(${target} INTERFACE ${PARAM_COPTS_PUBL})
  #
  if (PARAM_LINK_STATIC)
    archie_deps_to_static_("${PARAM_DEPS_PUBL}" out_deps_publ)
    message(DEBUG "ARCHIE: archie_cxx_library_internal_ public static case target=${target} deps=${out_deps_publ}")
    target_link_libraries(${target} INTERFACE ${out_deps_publ})
  else()
    message(DEBUG "ARCHIE: archie_cxx_library_internal_ public shared case target=${target} deps=${PARAM_DEPS_PUBL}")
    target_link_libraries(${target} INTERFACE ${PARAM_DEPS_PUBL})
  endif()
endfunction()


#[=======================================================================[.rst:
Add a C/C++ executable.

.. code-block:: cmake

  archie_cxx_executable(<namespace> <name>
              [EXCLUDE_FROM_ALL]
              [LINK_STATIC]
              <SRCS> [items...]
              <DEPS_PRIV> [items...]
              <COPTS_PRIV> [items...])

#]=======================================================================]
function(archie_cxx_executable namespace name)
  # Argument parsing, validation and defaults
  set(options EXCLUDE_FROM_ALL LINK_STATIC)
  set(multiValueArgs SRCS DEPS_PRIV COPTS_PRIV)
  cmake_parse_arguments(PARAM "${options}" "" "${multiValueArgs}" ${ARGN})
  # Create the executable target
  set(target "${namespace}-${name}")
  if(NOT PARAM_EXCLUDE_FROM_ALL)
    add_executable(${target})
  else()
    add_executable(${target} EXCLUDE_FROM_ALL)
  endif()
  #
  target_sources(${target} PRIVATE ${PARAM_SRCS})
  target_compile_options(${target} PRIVATE ${PARAM_COPTS_PRIV})
  #
  if (PARAM_LINK_STATIC)
    archie_deps_to_static_("${PARAM_DEPS_PRIV}" out_deps_priv)
    message(DEBUG "ARCHIE: archie_cxx_executable private static case target=${target} deps=${out_deps_priv}")
    target_link_libraries(${target} PRIVATE ${out_deps_priv})
  else()
    message(DEBUG "ARCHIE: archie_cxx_executable private shared case target=${target} deps=${PARAM_DEPS_PRIV}")
    target_link_libraries(${target} PRIVATE ${PARAM_DEPS_PRIV})
  endif()
endfunction()

